<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Spirit</title>
    <link>https://bryanmartinez95.github.io/index.xml</link>
    <description>Recent content on Welcome to Spirit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Sep 2016 03:15:27 -0700</lastBuildDate>
    <atom:link href="https://bryanmartinez95.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HTTP/1.1 review</title>
      <link>https://bryanmartinez95.github.io/learn/http/</link>
      <pubDate>Mon, 26 Sep 2016 03:15:27 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/learn/http/</guid>
      <description>&lt;p&gt;&lt;h1&gt;HTTP/1.1 review&lt;/h1&gt;
In this post we&amp;rsquo;ll be going over what HTTP is and why its important. Practically every web application uses HTTP in some form or way and its something that can be used without truly understanding it. But in order to truly gain a deeper understanding of how our applications work, we must understand whats happening beneath the lines. HTTP runs through port 80 and is defeined in RFC 2616.
&lt;h2&gt;What is HTTP?&lt;/h1&gt;
We see HTTP used everywhere but what exactly is HTTP? To put it simply, HTTP is a application level protocol thats used to transfer data across the world wide web. HTTP follows a client server pattern where a client would make a request to some sort of server and the server would reply back with a response. A client can make various kinds of requests to a server depending on what the client is trying to do. A simple example is typing in www.google.ca in your browser, this is simply asking to GET the resource with the domain name of google.ca and the server responds back with the html file that describes google.ca.
&lt;h2&gt;POST vs GET&lt;/h2&gt;
In essense, POST and get both do the same thing. But they key difference is that POST encases form data and resources inside the message body.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Format&lt;/h2&gt;
HTTP/1.0 defines 16 headers but none are required. HTTP/1/1 defined 46 headers and the HOST: header is required in requests. The header is at the top of every HTTP request. The very first line of a HTTP request will always follow the format of request type, resource, HTTP version ex. [GET /path/file.html HTTP/1.0]. Following the first line are the header lines which can have things like date and sender information. Following this is the message body where resource information is stored. If successful the server will respond back with a 200 code ex. [HTTP/1.1 200 OK] along with the requested resource. If failed, the server will respond back with a non 200 code indicating that there was some sort of error.
&lt;h2&gt;Request Types&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;GET:&lt;/b&gt; Retrieve requested resource&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;POST:&lt;/b&gt; Retrieve requested resource &amp;amp; put form data in message body&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;PUT:&lt;/b&gt; enclosed entity stored under supplied request-URI, or updates if existing&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;DELETE:&lt;/b&gt; delete specified resource&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;HEAD:&lt;/b&gt; identical to GET but has no message body&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;TRACE:&lt;/b&gt; invoke a remote, application-layer loop- back of the request message&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;CONNECT:&lt;/b&gt; for use with proxy&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;OPTIONS:&lt;/b&gt; information about communication options&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Response Codes&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;100-199:&lt;/b&gt; Informational&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;200-299:&lt;/b&gt; Success&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;300-399:&lt;/b&gt; Redirection&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;400-499:&lt;/b&gt; Client Error&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;500-599:&lt;/b&gt; Server Error&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCP/IP review</title>
      <link>https://bryanmartinez95.github.io/learn/tcpip/</link>
      <pubDate>Mon, 26 Sep 2016 02:24:40 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/learn/tcpip/</guid>
      <description>&lt;p&gt;&lt;h1&gt;TCP/IP review&lt;/h1&gt;
Admittedly, memorizing things like protocols is something im really bad at. I also have a test coming up soon which is probably the main reason as to why im writing this. TCP/IP is one of those things that you don&amp;rsquo;t think about on a day to day basis as a developer but its something that lies at the core of almost everything we do. Down below are definitions of TCP/IP in my own words and what I need to know about them as a software developer.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;What is TCP/IP?&lt;/h2&gt;
TCP/Ip is a &lt;b&gt;set&lt;/b&gt; of protocols that work together to send datagrams across the internet from one device to another. One of the main things that make TCP/IP so important is that it is &lt;b&gt;reliable&lt;/b&gt;. To find out how and why its reliable, we have to look at each layer of the stack.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;The layers of TCP/IP&lt;/h2&gt;
TCP/IP can be shown as a four-layer conceptual model thats known as the DARPA model. We&amp;rsquo;ll start from the bottom of the stack.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Network Interface layer&lt;/h3&gt;
    The network interface layer is responsible for putting packets/datagrams onto the network and is also responsible for receiving packets off the network medium/device. An important thing to remember is that the network interface layer &lt;b&gt;alone&lt;/b&gt; can be assumed to be &lt;b&gt;unreliable.&lt;/b&gt; In a realistic point of view, the network layer mainly involves the link between the router and a device. The PC sends a packet to the router and the router decides where to send it from there. Likewise, the router picks the connected device and sends the received message to the pc.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Internet Layer&lt;/h3&gt;
    The internet layer is the next step in the stack. The internet layer is responsible for three things &lt;b&gt;addressing, packaging and routing.&lt;/b&gt; The core protocols that make up this layer are IP, ARP, ICMP and IGMP. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Internet Protocol:&lt;/b&gt; The IP is a routable protocol responsible for IP addressing and the fragmentation and reassembly of packets.&lt;br/&gt;
&lt;b&gt;Address Resolution Protocol:&lt;/b&gt; ARP is in charge of the conversion of MAC addresses and IP addresses.&lt;br/&gt;
&lt;b&gt;Internet Control Message Protocol:&lt;/b&gt; ICMP is responsible for providing diagnostics and reporting errors or condtions regarding delivery of packets.&lt;br/&gt;
&lt;b&gt;Internet Group Management Protocol:&lt;/b&gt; is responsible for manangement of IP multicast groups&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Host to host transport layer&lt;/h3&gt;
    The transport layer can sort of be misleading. The transport layer has nothing to do with the actualy sending and receiving of packets. The transport layer is responsible for providing session and datagram communication services. The transport layer is based off of two core protocols: TCP and UDP. TCP provides a one-to-one, connection-oriented, relaible commucation service. UDP provides one-to-one, one-to-many, connectionless, and unreliable  commucations services. UDP can be faster than TCP but is very unreliable and is used when the overhead of TCP is not desired.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Application Layer&lt;/h3&gt;
    The application layer is the layer that makes use of the services in each layer and defines the protocols that applications use to exchange data. Application layer protocols are always being developed, one that comes to mind is HTTP/2. Some of the most used protocols are HTTP, FTP, SMTP and telnet.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;OSI (Open Systems Interconnection) model&lt;/h2&gt;
The OSI model is a deeper look at each layer and seperates the DARPA model a bit further. In order:
&lt;ul&gt;
    &lt;li&gt;Application layer&lt;/li&gt;
    &lt;li&gt;Presentation layer&lt;/li&gt;
    &lt;li&gt;Session layer&lt;/li&gt;
    &lt;li&gt;Trasport layer&lt;/li&gt;
    &lt;li&gt;Network layer&lt;/li&gt;
    &lt;li&gt;Data Link layer&lt;/li&gt;
    &lt;li&gt;Physical layer&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;TCP&lt;/h2&gt;
TCP is a reliable, connection-oriented delivery service. Connection-oriented means that a connection must be first established before hosts can exchange data. The term 3 way handshake is often used with TCP to ensure that datagrams successfully reach their destination. TCP also breaks down and constructs datagrams that are too big to be sent. TCP uses byte-stream communications. TCP is defined in RFC 793. When I hear TCP i also like to think about the word &lt;b&gt;session.&lt;/b&gt; TCP also provides a checksum, the checksum is used to verify the integrity of the TCP header and the TCP data.
&lt;h2&gt;UDP&lt;/h2&gt;
UDP provides a connectionless datagram service that offers unreliable, best-effort delivery of data trasmitted in messages. When something is being sent through UDP there will be no guarantee that the message has been sent and UDP is also one-to-many.
&lt;h2&gt;IP&lt;/h2&gt;
IP by itself is connectionless and unreliable. Its main use is addressing and routing. IP is defined in RFC 791. The checksum is a mathematical computation used to verify the integrity of the IP header.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://bryanmartinez95.github.io/experiment/test/</link>
      <pubDate>Tue, 20 Sep 2016 20:45:33 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/experiment/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unit Testing and an Introduction to Mocks</title>
      <link>https://bryanmartinez95.github.io/blog/UnitTesting/</link>
      <pubDate>Wed, 14 Sep 2016 23:26:50 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/blog/UnitTesting/</guid>
      <description>&lt;p&gt;&lt;h1&gt;Unit Testing&lt;/h1&gt;
Today Ill be covering basic unit testing along with the concept of what a Mock is. Before this, we must first define what a &amp;ldquo;unit&amp;rdquo; specifically is. The definition of a unit can be different for everyone but can generally be seen as the smallest piece of functionality. For the purposes of this blog post, we&amp;rsquo;ll be using Java &amp;ldquo;methods&amp;rdquo; as a unit.
&lt;h2&gt;Unit Testing With JUnit&lt;/h2&gt;
JUnit is one of the main unit testing frameworks for the Java programming language. JUnit provides many useful tools to allow us to test our code quickly and easily. For example, if i had a UserService and i wanted to test a addUser method, instead of going through the painful process of building a whole front end just to see if it worked properly, I could just create a Unit Test for it and hook it up to run separately from the main application.
[java]public class UserTest{
   List users;
   UserService userService;&lt;/p&gt;

&lt;p&gt;@Before
   public void setup()
   {
      userService = new UserService();
      users= new ArrayList&amp;lt;&amp;gt;();
   }&lt;/p&gt;

&lt;p&gt;@Test
   public void addUser()
   {
       User user= new user(&amp;ldquo;name&amp;rdquo;);
       userService.add(user);
       users = userService.getAll();
       assertEquals(1, users.size();
   }&lt;/p&gt;

&lt;p&gt;@Test
   public void addUserNoName()
   {
        User user= new user(null);
       userService.add(user);
       users = userService.getAll();
       assertEquals(0, users.size();
   }&lt;/p&gt;

&lt;p&gt;}[/java]
Above is a simple example of a unit test to see whether or not the userService adds a user to the system in the correct conditions, in our second test addUserNoName, we set the name of the user to null, this the userservice will not add this user to the system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;http://junit.org/&lt;/a&gt;
&lt;h2&gt;Basic Mocking With Mockito&lt;/h2&gt;
Mockito is a mocking framework for Java that allows helps you create unit tests. There are many mocking frameworks you could use but I found that Mockito is amongst the most popular in the Java community.
&lt;h3&gt;What is a mock and why is it useful?&lt;/h3&gt;
When our code has many dependencies things often become hard to unit test as a object may depend on the existence of another object. For example, a UserService is reliant on a UserRepository.&lt;/p&gt;

&lt;p&gt;This can cause problems because if I run into an error, I don&amp;rsquo;t exactly know whether the method I am currently testing is correct or whether the dependencies contain errors within themselves.The other problem is that, it will not be a true unit test if you are relying on other things to get your result.&lt;/p&gt;

&lt;p&gt;This is where mocking comes in handy, we can create pretend objects in which we can specify the behavior of these objects.
[java]public class UserTest{
   List users;
   UserService userService;
   UserRepository userRepository;&lt;/p&gt;

&lt;p&gt;@Before
   public void setup()
   {
      userRepository = &lt;b&gt;Mockito.mock(UserRepository.class)&lt;/b&gt;
      userService = new UserService();
      users= new ArrayList&amp;lt;&amp;gt;();
   }&lt;/p&gt;

&lt;p&gt;@Test
   public void mockTest()
   {
       User user= new user(&amp;ldquo;name&amp;rdquo;);
       &lt;b&gt;Mockito.when(userRepository.save(user)).thenReturn(true);&lt;/b&gt;&lt;br /&gt;
       &lt;b&gt;Mockito.when(userRepository.findUser(user).thenReturn(user);&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   userService.add(user);
   User user2= userRepository.findUser(user);
   assertEquals(user,user2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}[/java]
Above is another example of the UserService being tested. However, the UserService relies on the userRepository in order to work, so in order to properly implement this test, we use the following lines which are pretty self explanatory to create a pretend userRepository that does exactly what we tell it to do.
&lt;a href=&#34;http://site.mockito.org/&#34;&gt;http://site.mockito.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration Testing</title>
      <link>https://bryanmartinez95.github.io/blog/IntegrationTesting/</link>
      <pubDate>Wed, 14 Sep 2016 23:25:43 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/blog/IntegrationTesting/</guid>
      <description>&lt;p&gt;&lt;h1&gt;Integration Testing&lt;/h1&gt;
My experience with integration testing lies mainly with testing entities and database relationships as well as testing database queries. There are many ways to do integration testing as it involves testing multiple layers together to see if they work together properly. This post will specifically use examples that are focused on data access.
&lt;h2&gt;In-Memory Database&lt;/h2&gt;
A very useful tool to test databases is a In-Memory database, this way if your system is live or your actual database is in a delicate state of some sort, we can create a temporary in-memory database that will construct and de construct itself after every test. Another benefit of a in-memory database is that it proves to be faster than a traditional database because it is sitting in memory. The one I have most experience with is HSQLDB (Hyper SQL database). You can set up your application to use this in memory database at runtime instead of your actual one for safer and faster tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hsqldb.org/&#34;&gt;http://hsqldb.org/&lt;/a&gt;
&lt;h2&gt;Data Access Testing&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;[java]public int insert(User user)  {
        EntityManager em = DBUtil.getEmFactory().createEntityManager();
        try {
            em.getTransaction().begin();
            em.persist(user);
            em.getTransaction().commit();
            return 1;
        } finally {
            em.close();
        }
    }
[/java]&lt;/p&gt;

&lt;p&gt;Here is a method using Hibernate JPA to insert a user into a database. To break it down, we pass a User object to the method, open the connection to the database using the EntityManager, open a transaction, persist the user, commit the transaction and close the connection. This makes sense, but how do we know that it does what we need it to do? Well there&amp;rsquo;s no way of testing this without an actual database and in order to test this, we must also use another method to help us out.&lt;/p&gt;

&lt;p&gt;[java]public User getUser(String userName)  {
        EntityManager em = DBUtil.getEmFactory().createEntityManager();
        try {
            User user = em.find(User.class, userName);
            return user;
        } finally {
            em.close();&lt;br /&gt;
        }
    }
[/java]&lt;/p&gt;

&lt;p&gt;Here is the getUser method that we will assume has been tested and works properly already. This method takes in a username and based on that username, will return the appropriate user.&lt;/p&gt;

&lt;p&gt;[java]public class UserTest
{
    public User user;
    public UserRepository userRepository;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Before
public void setup()
{
    userRepository = new UserRepository();
    user = new User(&amp;quot;Mike&amp;quot;,&amp;quot;password&amp;quot;);
}

@Test
public void insertUserTest1()
{
    userRepository.insert(user);
    User user2 = userRepository.getUser(&amp;quot;Mike&amp;quot;);
    Assert.assertEquals(&amp;quot;Mike&amp;quot;, user2.getUserName());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
[/java]&lt;/p&gt;

&lt;p&gt;Here is a small and quick example of the integration test. We create a user with the username of Mike, after that we use the getUser method to check the database for any users with the username of Mike, if it gets the proper result back, our test will pass.&lt;/p&gt;

&lt;p&gt;The main thing to point out here is that integration tests sit on top of unit tests. &lt;strong&gt;Testing is a bottom up process. &lt;/strong&gt;There are many layers as well as many methods involved in this short test. It is important to do unit testing before we do integration tests to ensure that each part of it is functioning properly before we put the pieces together.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What does testing mean to a software developer?</title>
      <link>https://bryanmartinez95.github.io/blog/WhatDoesTestingMean/</link>
      <pubDate>Wed, 14 Sep 2016 23:24:41 -0700</pubDate>
      
      <guid>https://bryanmartinez95.github.io/blog/WhatDoesTestingMean/</guid>
      <description>&lt;p&gt;&lt;h1&gt;What does testing mean to a software developer?&lt;/h1&gt;
I thought i knew what properly testing my code meant. But as I started to grow as a junior developer, I started to become confused as to what testing really was.&lt;/p&gt;

&lt;p&gt;As a result of my research, I have realized that the definition of testing is different between every person and that “testing” is basically a huge contradiction. Through my research i have found that each developer must create their own style and own set of rules. A couple questions you can ask yourself to find out include “How much time do i have to finish this program?”, “How much much time must i devote to testing to make this program solid and bug free?”, “Am i sure that this piece of code works in different scenarios?”. If you can create a application that produces no bugs with zero testing in any situation, than you do not need to test one bit. If your the kind of person who must test every function/class/use case of your application to feel confident in your work, than that is your correct answer. I find that the middle of the two is a good place for me and that testing is a means to get myself in the correct mindset while programming to think from different angles.&lt;/p&gt;

&lt;p&gt;This will change between workplace and groups but as a general definition i have split testing into three main sections that make sense to me. Unit testing, Integration testing and acceptance/full stack testing.
&lt;h2&gt;&lt;strong&gt;Unit testing&lt;/strong&gt;&lt;/h2&gt;
&lt;img class=&#34;alignnone wp-image-38&#34; src=&#34;https://liandraumr.files.wordpress.com/2016/01/colored-lego-blocks.jpg?w=195&amp;amp;h=130&#34; alt=&#34;colored-lego-blocks&#34; width=&#34;195&#34; height=&#34;130&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The definition of a unit can vary between project, a unit can be as small as testing a method/function or a unit can mean testing the functionality of a class. A unit can also mean testing how a particular group of methods work together to complete a task. But to summarize the definition, a unit test is used to test the smallest unit of functionality. Imagine it as checking each individual Lego block is in working order. But there are a couple rules that unit testing must follow.
&lt;ul&gt;
    &lt;li&gt;Must be independent and should be as dependency free as possible&lt;/li&gt;
    &lt;li&gt;Must not touch a database&lt;/li&gt;
    &lt;li&gt;Must not access the network&lt;/li&gt;
    &lt;li&gt;Must not use any outside resource&lt;/li&gt;
&lt;/ul&gt;
If your checking to see if your “add user” function successfully updated the tables in your database, that is not unit testing. More specifically, if your checking that if your “retrieve  all users” function returns a list of 3 when there are 3 mock users created, that is unit testing. We’ll touch a little more on mocking frameworks and more on unit testing in a future post.
&lt;h2&gt;Integration Testing&lt;/h2&gt;
&lt;h2&gt;&lt;img class=&#34;alignnone wp-image-63&#34; src=&#34;https://liandraumr.files.wordpress.com/2016/01/system_integration_1.jpg?w=183&amp;amp;h=160&#34; alt=&#34;system_integration_1&#34; width=&#34;183&#34; height=&#34;160&#34; /&gt;&lt;/h2&gt;
If testing was a pyramid, Integration tests would build on top unit tests. Integration tests are done by combining more than one unit together to ensure that multiple pieces of the puzzle fit together correctly. Integration testing is also where databases come into play. To test whether your application successfully adds a user to the database and that user can be retrieved from the database is a integration test.&lt;/p&gt;

&lt;p&gt;If you’ve built the front end part of an application, how do you know that your end can successfully interact with the database back end? By using integration testing, we can test whether the two systems can successfully talk to each other. Unit tests, test whether the unit or function in itself works. With integration tests, we can see if the two working functions/units can talk to each other without error. The one thing to be aware of with integration tests is the current environment you are in. Because things are working with your environment, does not mean that the application will work guaranteed at production. We will also be going in depth into integration testing in a future post.
&lt;h2&gt;Acceptance Testing&lt;/h2&gt;
&lt;img class=&#34;alignnone wp-image-95&#34; src=&#34;https://liandraumr.files.wordpress.com/2016/01/legopside3.jpg?w=185&amp;amp;h=139&#34; alt=&#34;legopside3&#34; width=&#34;185&#34; height=&#34;139&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Acceptance testing means a couple of different things but all generally lead to the same definition. Typically acceptance testing involves the entire system in the environment it is deployed in.&lt;/p&gt;

&lt;p&gt;e.g. Your project team has been using a local server to launch the application but the clients choice of server is different and once the application is set up, tests must be run to ensure that the application works the same.&lt;/p&gt;

&lt;p&gt;The advantage of this type of of testing is pretty clear to see. It tests the functionality to see whether your use cases are working properly. Everyone does acceptance testing whether they realize it or not. It can be as simple as checking to see if you can log into your system properly or successfully update an account. A good question to ask yourself is whether or not you have met the clients expectations with what you have created.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;h2&gt;Summary&lt;/h2&gt;
Each time we move up a step, our application gets harder to find the bugs as there the number of things to test exponentially increases. In an MVC layout, all layers of your code is being touched and it can be hard to find out where things are breaking. But as we inspect each type of test, we can adjust our magnifying glass as needed and easily pin point where our code is breaking. Each layer of testing is equally important and by having a layer of each, they work together to ensure maximum code coverage. But most importantly, testing is a means to get you in the correct mindset while programming to think from different angles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://bryanmartinez95.github.io/about/</link>
      <pubDate>Wed, 31 Aug 2016 03:05:23 -0600</pubDate>
      
      <guid>https://bryanmartinez95.github.io/about/</guid>
      <description>&lt;p&gt;&lt;h1&gt;About&lt;/h1&gt;
&lt;p&gt;Welcome to my personal website! My name is Bryan Martinez and here you will find a lot of things programming related. I will be writing mainly about things ranging from architecture, Javascript, HTML, CSS, .NET framework, database concepts, testing, or just new intersting things. &lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
I was first introduced into the world of programming in 2014 . I am currently in the 3rd year of the Bachelor of Applied Information Systems Degree program at NAIT in Edmonton. Before NAIT I took the Information Technology diploma majoring in Software development at SAIT. Currently, I work remotely as a web developer at Resource Energy Solutions, a company based in Calgary. The main reason why I decided to get my degree was because I still wasn&amp;rsquo;t sure what I wanted to specialize in. Recently, I discovered that becoming a software architect would be really intersting as I love designing and building systems. Right now im trying to learn as many things as I can to become closer to becoming a reputable software architect.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Specialties:&lt;/b&gt; C#, ASP.NET MVC5, Entity Framework 6, LESS, KnockoutJS, SQL, Javascript, HTML5, CSS3&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Other languages I have worked with include:&lt;/b&gt; JavaEE, Spring Boot, Hibernate, PL/SQL, Oracle 11g, Bootstrap, JQuery&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Currently Learning:&lt;/b&gt; Angular 2 &amp;amp; ASP.NET Core&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Personal&lt;/h2&gt;
As for outside programming im a pretty simple guy. I spend a lot of my spare time watching a lot of anime or playing games with my friends. I have been told I can be a pretty sarcastic but patient person. I can be pretty quiet at first but if you get to know me really well I can be quite talkative.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Contact&lt;/h2&gt;
&lt;p&gt;Email: B.martinez.95@hotmail.com &lt;/p&gt;
&lt;p&gt;Cell: (403) 909- 5132&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capstone</title>
      <link>https://bryanmartinez95.github.io/project/Capstone/</link>
      <pubDate>Wed, 31 Aug 2016 02:45:57 -0600</pubDate>
      
      <guid>https://bryanmartinez95.github.io/project/Capstone/</guid>
      <description>&lt;h1&gt;Capstone - Recursive Delegation 2016&lt;/h1&gt;

&lt;p&gt;At my time at SAIT I spent a year working on a Capstone project. This capstone project was done with a group of 4 in which we were called Recursive Delegation. This Capstone serves as a milestone to show our growth at our time at SAIT. Our client was a researcher for the Applied Research and Innovation division at SAIT.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;The Problem&lt;/h3&gt;
Our clients issue was that he was spending too much time gathering data from different sources and spending too much time on report generation. An estimated 8-16 hours a week was spent gathering data and generating reports when the clients time could be spent much more effeciently.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Our Solution&lt;/h3&gt;
Our Solution was to create a web-based application that automatically collects and centralizes all the clients data in a centralized location for visualization aswell as automatic report generation.
&lt;h2&gt;The Stack&lt;/h2&gt;
&lt;p&gt;A requirement given to us by SAIT was that we must use java and mysql. Our team decided to take a step forwards and we decided to use other frameworks to aid in our development. This application can be seen as two seperate applications.&lt;/p&gt;
&lt;h3&gt;Hibernate JPA&lt;/h3&gt;
&lt;p&gt;We used &amp;ldquo;code first&amp;rdquo; to develop our database. By using Hibernate JPA and java entities, we were able to automatically build our database based on our entities written in java. No SQL required. There are ups and downs to this. Frameworks like this can be seen as bulkier and slower but it speeds up the development process quite a bit and can always be tweeked for performance later on. Hibernate JPA also serves as a quick and easy way for data access where most of our data access interfaces were merely a couple lines of code.&lt;/p&gt;
&lt;h3&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;We used Spring boot to create a RESTful webservice. What this means is that you can access the resources stored in the database by calling API&amp;rsquo;s through URI&amp;rsquo;s. Once data is requested, it will send back whatever was requested (if permissions permit) in a JSON format.&lt;/p&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
We decided to use redis as another layer of security to handle CSRF. When a user logs in, they are cached in the redisDB and whenever a someone makes a request to the back end, the system first checks whether or not the user is authenticated with redis.
&lt;h3&gt;Angular&lt;/h3&gt;
We decided on using Angular as our front end framework which has many benefits. Material design that came with Angular allowed for a very simplistic design which was unique, refreshing and simplistic. The front end makes HTTP requests to the back end and serves the information back usually in a grid format.
&lt;h2&gt;Front End&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Main Page&lt;/h3&gt;
&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/Home.PNG&#34; alt=&#34;Home&#34;&gt;
    &lt;figcaption&gt;Figure 1. Home/Project Page&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The main landing page is the project page as requested by the client. Here contains a grid where all the cleints projects are displayed. Here he can add samples, generate reports or modify data as needed.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Menu&lt;/h3&gt;
&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/menu.PNG&#34; alt=&#34;menu&#34;&gt;
    &lt;figcaption&gt;Figure 3.Menu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Portability was a big aspect to our client and there was potential for mobile use. To solve these problems we decided on keeping a minimalistic design and keeping the menu hidden until clicked.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Reports&lt;/h3&gt;
&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/reportgen.PNG&#34; alt=&#34;report&#34;&gt;
    &lt;figcaption&gt;Figure 6 Report Generation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As per request, automatic report generation was a big piece of the application as the client spends a large amount of time generating reports. Unfortunately, due to time restraints we were only able to make one generic report that could serve as the basis for other reports.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Other Pages&lt;/h3&gt;
&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/filter.PNG&#34; alt=&#34;Filter&#34;&gt;
    &lt;figcaption&gt;Figure 2. Grid Filter&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/modal.PNG&#34; alt=&#34;modal&#34;&gt;
    &lt;figcaption&gt;Figure 4. Modal view&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img class=&#34;picture-project&#34; src=&#34;https://bryanmartinez95.github.io/images/recursivedelegation/projectform.PNG&#34; alt=&#34;project form&#34;&gt;
    &lt;figcaption&gt;Figure 5. Project Form&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
    </item>
    
  </channel>
</rss>